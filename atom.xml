<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Geting]]></title>
  <link href="http://geting.github.io/atom.xml" rel="self"/>
  <link href="http://geting.github.io/"/>
  <updated>2016-02-02T11:29:19+08:00</updated>
  <id>http://geting.github.io/</id>
  <author>
    <name><![CDATA[Geting]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android App 开发]]></title>
    <link href="http://geting.github.io/blog/2016/02/02/android-app-kai-fa/"/>
    <updated>2016-02-02T11:26:10+08:00</updated>
    <id>http://geting.github.io/blog/2016/02/02/android-app-kai-fa</id>
    <content type="html"><![CDATA[<ol>
<li>怎么打开USB调试
 1）在Andriod 4.2版本之前
     点击应用程序-》设置-》应用程序-》开发-》USB调试
 2）4.2版本之后
     设置-》关于手机-》在版本号上点几下</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Connect Mysql With Spark]]></title>
    <link href="http://geting.github.io/blog/2016/01/29/connect-mysql-with-spark/"/>
    <updated>2016-01-29T15:12:15+08:00</updated>
    <id>http://geting.github.io/blog/2016/01/29/connect-mysql-with-spark</id>
    <content type="html"><![CDATA[<ol>
<li><p>设置SPARK_CLASSPATH,如：</p>

<pre><code class="` bash"> export SPARK_CLASSPATH=/home/ting/software/mysql-connector-java-5.1.38/mysql-connector-java-5.1.38-bin.jar
</code></pre></li>
<li><p>启动spark-shell</p>

<pre><code class="` bash"> sh ./bin/spark-shell
</code></pre></li>
<li><p>把Mysql 表转化为DataFrame对象</p>

<pre><code class="` scala"> val jdbcDF = sqlContext.load("jdbc", Map("url" -&gt; "jdbc:mysql://localhost:3306/your_database?user=your_user&amp;password=your_password", "dbtable" -&gt; "your_table"))
</code></pre></li>
<li><p>DataFrame的一些简单用法</p>

<pre><code class="` scala"> // 输出表结构
 df.printSchema()

 // 选择所有年龄大于21岁的人，只保留name字段
 df.filter(df("age") &gt; 21).select("name").show()

 // 选择name，并把age字段自增
 df.select("name", df("age") + 1).show()

 // 按年龄分组计数
 df.groupBy("age").count().show()

 // 左联表（注意是3个等号！）
 df.join(df2, df("name") === df2("name"), "left").show()
</code></pre></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何在子项目中避免引用重复的node_modules]]></title>
    <link href="http://geting.github.io/blog/2015/10/09/ru-he-zai-zi-xiang-mu-zhong-bi-mian-yin-yong-zhong-fu-de-node-modules/"/>
    <updated>2015-10-09T17:42:55+08:00</updated>
    <id>http://geting.github.io/blog/2015/10/09/ru-he-zai-zi-xiang-mu-zhong-bi-mian-yin-yong-zhong-fu-de-node-modules</id>
    <content type="html"><![CDATA[<p>B项目是A项目的子项目，A项目使用npm安装了很多的模块，B项目中也需要这些模块，如何避免重复安装。</p>

<!-- more -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>B
</span><span class='line'>├── node_modules
</span><span class='line'>│   ├── A
</span><span class='line'>│   │   ├── Gruntfile.js
</span><span class='line'>│   │   ├── node_modules
</span><span class='line'>│   │   │   └── Z
</span><span class='line'>│   │   └── package.json (has depencencies X,Y,Z)
</span><span class='line'>│   ├── X
</span><span class='line'>│   └── Y
</span><span class='line'>└── package.json (has dependencies A,X,Y)</span></code></pre></td></tr></table></div></figure>


<ol>
<li><p>方法一</p>

<pre><code class="` javascript"> module.exports = function (grunt) {
     grunt.file.expand('../node_modules/grunt-*/tasks').forEach(grunt.loadTasks);
 }
</code></pre></li>
<li><p>方法二， 这种方法是通过改变了grunt的当前路径实现的，比较tricky,不推荐</p>

<pre><code class="javascript">module.exports = function (grunt) {
     var cwd = process.cwd();
     process.chdir(cwd+'/../');
     require('matchdep').filterDev('grunt-*').forEach(grunt.loadNpmTasks);
     process.chdir(cwd);
 }
</code></pre></li>
<li><p>参考</p>

<p> 1) <a href="http://stackoverflow.com/questions/15225865/centralise-node-modules-in-project-with-subproject">http://stackoverflow.com/questions/15225865/centralise-node-modules-in-project-with-subproject</a></p>

<p> 2) <a href="https://www.npmjs.com/package/load-grunt-parent-tasks">https://www.npmjs.com/package/load-grunt-parent-tasks</a></p>

<p> 3) <a href="https://github.com/gruntjs/grunt/issues/696">https://github.com/gruntjs/grunt/issues/696</a></p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring 版本冲突]]></title>
    <link href="http://geting.github.io/blog/2015/08/11/springversionconflict/"/>
    <updated>2015-08-11T19:00:24+08:00</updated>
    <id>http://geting.github.io/blog/2015/08/11/springversionconflict</id>
    <content type="html"><![CDATA[<p>NoSuchMethodError: org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseBeanDefinitionAttributes</p>

<!-- more -->


<p><img src="http://geting.github.io/images/spring/1.jpeg"></p>

<p>首先怀疑是spring 类冲突，操作步骤如下：</p>

<ol>
<li><p>在项目的target目录（也可以把war解压缩，在解压后的目录下）下查找spring的jar</p>

<pre><code class="` bash">  ​find . -name "*spring*"
</code></pre>

<p> 结果如下，发现有一2.0.7版本的spring，和别的3.0.5的都不一样</p>

<p> <img src="http://geting.github.io/images/spring/2.jpeg"></p></li>
<li><p>使用mvn dependency:tree找到具体哪个dependency引用的这个版本的spring</p></li>
<li><p>使用exclusions在pom.xml中排除对spring的引用</p>

<pre><code class="` xml pom.xml"> &lt;dependency&gt;
     &lt;groupId&gt;com*********&lt;/groupId&gt;
     &lt;artifactId&gt;*****&lt;/artifactId&gt;
     &lt;version&gt;1.2.5&lt;/version&gt;
     &lt;exclusions&gt;
         &lt;exclusion&gt;
             &lt;groupId&gt;org.springframework&lt;/groupId&gt;
             &lt;artifactId&gt;spring&lt;/artifactId&gt;
         &lt;/exclusion&gt;
         &lt;exclusion&gt;
             &lt;groupId&gt;org.springframework&lt;/groupId&gt;
             &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;
         &lt;/exclusion&gt;
         &lt;exclusion&gt;
             &lt;groupId&gt;org.springframework&lt;/groupId&gt;
             &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;
         &lt;/exclusion&gt;
     &lt;/exclusions&gt;
 &lt;/dependency&gt;
</code></pre></li>
<li>重新生成部署，问题消失。</li>
</ol>


<p>问题原因</p>

<p>​找到spring-beans-3.0.5.RELEASE.jar和spring-2.0.7.jar.用反编译工具分别找到BeanDefinitionParserDelegate的定义。发现在3.0.5版本中有parseBeanDefinitionAttributes方法而2.0.7中没有。</p>

<p><img src="http://geting.github.io/images/spring/3.jpeg" title="'3.0.5'" ></p>

<p><img src="http://geting.github.io/images/spring/4.jpeg" title="'2.0.7'" ></p>

<p>其它有用工具：</p>

<p>pmap &lt;进程号>  找出Java进程加载的jar 包。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[三亚]]></title>
    <link href="http://geting.github.io/blog/2013/01/29/%5B%3F%5D-chang-shuo-zou-jiu-zou-de-lu-xing-san-ya/"/>
    <updated>2013-01-29T13:17:11+08:00</updated>
    <id>http://geting.github.io/blog/2013/01/29/[?]-chang-shuo-zou-jiu-zou-de-lu-xing-san-ya</id>
    <content type="html"><![CDATA[<p>19:30提议，
19：37请假，
21点买机票订酒店，
23：12打包完成，
凌晨5：00出门。</p>

<!-- more -->


<p><img src="http://geting.github.io/images/sanya/1.jpeg" title="'凌晨5点，北京的雾霾天，能见度不过10米'" ></p>

<p><img src="http://geting.github.io/images/sanya/2.jpeg" title="'三亚的蓝天白云'" ></p>

<p><img src="http://geting.github.io/images/sanya/3.png" title="'PM2.5指数对比'" ></p>
]]></content>
  </entry>
  
</feed>
